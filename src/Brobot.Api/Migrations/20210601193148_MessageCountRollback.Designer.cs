// <auto-generated />
using System;
using Brobot.Api.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Brobot.Api.Migrations
{
    [DbContext(typeof(BrobotDbContext))]
    [Migration("20210601193148_MessageCountRollback")]
    partial class MessageCountRollback
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Brobot.Api.Entities.Channel", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("PrimaryTimezone")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("primary_timezone");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("server_id");

                    b.HasKey("ChannelId");

                    b.HasIndex("ServerId");

                    b.ToTable("channel", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.DiscordEvent", b =>
                {
                    b.Property<int>("DiscordEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("DiscordEventId");

                    b.ToTable("discord_event", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.DiscordUser", b =>
                {
                    b.Property<decimal>("DiscordUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<bool?>("BrobotAdmin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("brobot_admin");

                    b.Property<string>("Timezone")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("timezone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("username");

                    b.HasKey("DiscordUserId");

                    b.ToTable("discord_user", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.DiscordUserChannel", b =>
                {
                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.HasKey("DiscordUserId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("discord_user_channel", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.EventResponse", b =>
                {
                    b.Property<int>("EventResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<int>("DiscordEventId")
                        .HasColumnType("integer")
                        .HasColumnName("discord_event_id");

                    b.Property<string>("MessageText")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("message_text");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("response_text");

                    b.HasKey("EventResponseId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("DiscordEventId");

                    b.ToTable("event_response", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.HotOp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDateTimeUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_datetime_utc");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_id");

                    b.Property<decimal?>("PrimaryChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("primary_channel_id");

                    b.Property<DateTime>("StartDateTimeUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_datetime_utc");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PrimaryChannelId");

                    b.ToTable("hot_op", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.HotOpSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.Property<DateTime?>("EndDateTimeUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_datetime_utc");

                    b.Property<int>("HotOpId")
                        .HasColumnType("integer")
                        .HasColumnName("hot_op_id");

                    b.Property<DateTime>("StartDateTimeUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_datetime_utc");

                    b.Property<decimal>("VoiceChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("voice_channel_id");

                    b.HasKey("Id");

                    b.HasIndex("DiscordUserId");

                    b.HasIndex("HotOpId");

                    b.HasIndex("VoiceChannelId");

                    b.ToTable("hot_op_session", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("CronTrigger")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("cron_trigger");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<int>("JobDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("job_definition_id");

                    b.Property<DateTime?>("ModifiedDateUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified_date_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.HasKey("JobId");

                    b.HasIndex("JobDefinitionId");

                    b.ToTable("job", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobChannel", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.HasKey("ChannelId", "JobId");

                    b.HasIndex("JobId");

                    b.ToTable("job_channel", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobDefinition", b =>
                {
                    b.Property<int>("JobDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.HasKey("JobDefinitionId");

                    b.ToTable("job_definition", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobParameter", b =>
                {
                    b.Property<int>("JobParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("JobId")
                        .HasColumnType("integer")
                        .HasColumnName("job_id");

                    b.Property<int>("JobParameterDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("job_parameter_definition_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("value");

                    b.HasKey("JobParameterId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobParameterDefinitionId");

                    b.ToTable("job_parameter", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobParameterDefinition", b =>
                {
                    b.Property<int>("JobParameterDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<int>("JobDefinitionId")
                        .HasColumnType("integer")
                        .HasColumnName("job_definition_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<bool>("UserConfigurable")
                        .HasColumnType("boolean")
                        .HasColumnName("user_configurable");

                    b.HasKey("JobParameterDefinitionId");

                    b.HasIndex("JobDefinitionId");

                    b.ToTable("job_parameter_definition", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("channel_id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("message");

                    b.Property<decimal?>("OwnerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("ReminderDateUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("reminder_date_utc");

                    b.Property<DateTime?>("SentDateUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sent_date_utc");

                    b.HasKey("ReminderId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("OwnerId");

                    b.ToTable("reminder", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaEvent", b =>
                {
                    b.Property<int>("SecretSantaEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("CreatedById")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date_utc")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("SecretSantaGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("secret_santa_group_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("SecretSantaEventId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SecretSantaGroupId");

                    b.ToTable("secret_santa_event");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaGroup", b =>
                {
                    b.Property<int>("SecretSantaGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("CheckPastYearPairings")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("check_past_year_pairings");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("SecretSantaGroupId");

                    b.ToTable("secret_santa_group", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaGroupDiscordUser", b =>
                {
                    b.Property<int>("SecretSantaGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("secret_santa_group_id");

                    b.Property<decimal>("DiscordUserId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("discord_user_id");

                    b.HasKey("SecretSantaGroupId", "DiscordUserId");

                    b.HasIndex("DiscordUserId");

                    b.ToTable("secret_santa_group_discord_user", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaPairing", b =>
                {
                    b.Property<int>("SecretSantaPairingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("GiverId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("giver_id");

                    b.Property<decimal>("RecipientId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("recipient_id");

                    b.Property<int>("SecretSantaEventId")
                        .HasColumnType("integer")
                        .HasColumnName("secret_santa_event_id");

                    b.HasKey("SecretSantaPairingId");

                    b.HasIndex("GiverId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SecretSantaEventId");

                    b.ToTable("secret_santa_pairing");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Server", b =>
                {
                    b.Property<decimal>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("ServerId");

                    b.ToTable("server", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.StopWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("word");

                    b.HasKey("Id");

                    b.ToTable("stop_word");
                });

            modelBuilder.Entity("Brobot.Api.Entities.VoiceChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("server_id");

                    b.HasKey("Id");

                    b.HasIndex("ServerId");

                    b.ToTable("voice_channel", "brobot");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Channel", b =>
                {
                    b.HasOne("Brobot.Api.Entities.Server", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Brobot.Api.Entities.DiscordUserChannel", b =>
                {
                    b.HasOne("Brobot.Api.Entities.Channel", "Channel")
                        .WithMany("DiscordUserChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.DiscordUser", "DiscordUser")
                        .WithMany("DiscordUserChannels")
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("DiscordUser");
                });

            modelBuilder.Entity("Brobot.Api.Entities.EventResponse", b =>
                {
                    b.HasOne("Brobot.Api.Entities.Channel", "Channel")
                        .WithMany("EventResponses")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Brobot.Api.Entities.DiscordEvent", "DiscordEvent")
                        .WithMany("EventResponses")
                        .HasForeignKey("DiscordEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("DiscordEvent");
                });

            modelBuilder.Entity("Brobot.Api.Entities.HotOp", b =>
                {
                    b.HasOne("Brobot.Api.Entities.DiscordUser", "Owner")
                        .WithMany("HotOps")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.Channel", "PrimaryChannel")
                        .WithMany("HotOps")
                        .HasForeignKey("PrimaryChannelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("PrimaryChannel");
                });

            modelBuilder.Entity("Brobot.Api.Entities.HotOpSession", b =>
                {
                    b.HasOne("Brobot.Api.Entities.DiscordUser", "DiscordUser")
                        .WithMany("HotOpSessions")
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.HotOp", "HotOp")
                        .WithMany("Sessions")
                        .HasForeignKey("HotOpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.VoiceChannel", "VoiceChannel")
                        .WithMany("HotOpSessions")
                        .HasForeignKey("VoiceChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordUser");

                    b.Navigation("HotOp");

                    b.Navigation("VoiceChannel");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Job", b =>
                {
                    b.HasOne("Brobot.Api.Entities.JobDefinition", "JobDefinition")
                        .WithMany("Jobs")
                        .HasForeignKey("JobDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobDefinition");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobChannel", b =>
                {
                    b.HasOne("Brobot.Api.Entities.Channel", "Channel")
                        .WithMany("JobChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.Job", "Job")
                        .WithMany("JobChannels")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobParameter", b =>
                {
                    b.HasOne("Brobot.Api.Entities.Job", "Job")
                        .WithMany("JobParameters")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.JobParameterDefinition", "JobParameterDefinition")
                        .WithMany("JobParameters")
                        .HasForeignKey("JobParameterDefinitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobParameterDefinition");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobParameterDefinition", b =>
                {
                    b.HasOne("Brobot.Api.Entities.JobDefinition", "JobDefinition")
                        .WithMany("JobParameterDefinitions")
                        .HasForeignKey("JobDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobDefinition");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Reminder", b =>
                {
                    b.HasOne("Brobot.Api.Entities.Channel", "Channel")
                        .WithMany("Reminders")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.DiscordUser", "Owner")
                        .WithMany("Reminders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Channel");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaEvent", b =>
                {
                    b.HasOne("Brobot.Api.Entities.DiscordUser", "CreatedBy")
                        .WithMany("SecretSantaEvents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Brobot.Api.Entities.SecretSantaGroup", "SecretSantaGroup")
                        .WithMany("SecretSantaEvents")
                        .HasForeignKey("SecretSantaGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("SecretSantaGroup");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaGroupDiscordUser", b =>
                {
                    b.HasOne("Brobot.Api.Entities.DiscordUser", "DiscordUser")
                        .WithMany("SecretSantaGroupDiscordUsers")
                        .HasForeignKey("DiscordUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.SecretSantaGroup", "SecretSantaGroup")
                        .WithMany("SecretSantaGroupDiscordUsers")
                        .HasForeignKey("SecretSantaGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordUser");

                    b.Navigation("SecretSantaGroup");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaPairing", b =>
                {
                    b.HasOne("Brobot.Api.Entities.DiscordUser", "Giver")
                        .WithMany("GiverPairings")
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.DiscordUser", "Recipient")
                        .WithMany("RecipientPairings")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Brobot.Api.Entities.SecretSantaEvent", "SecretSantaEvent")
                        .WithMany("SecretSantaPairings")
                        .HasForeignKey("SecretSantaEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Giver");

                    b.Navigation("Recipient");

                    b.Navigation("SecretSantaEvent");
                });

            modelBuilder.Entity("Brobot.Api.Entities.VoiceChannel", b =>
                {
                    b.HasOne("Brobot.Api.Entities.Server", "Server")
                        .WithMany("VoiceChannels")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Channel", b =>
                {
                    b.Navigation("DiscordUserChannels");

                    b.Navigation("EventResponses");

                    b.Navigation("HotOps");

                    b.Navigation("JobChannels");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Brobot.Api.Entities.DiscordEvent", b =>
                {
                    b.Navigation("EventResponses");
                });

            modelBuilder.Entity("Brobot.Api.Entities.DiscordUser", b =>
                {
                    b.Navigation("DiscordUserChannels");

                    b.Navigation("GiverPairings");

                    b.Navigation("HotOps");

                    b.Navigation("HotOpSessions");

                    b.Navigation("RecipientPairings");

                    b.Navigation("Reminders");

                    b.Navigation("SecretSantaEvents");

                    b.Navigation("SecretSantaGroupDiscordUsers");
                });

            modelBuilder.Entity("Brobot.Api.Entities.HotOp", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Job", b =>
                {
                    b.Navigation("JobChannels");

                    b.Navigation("JobParameters");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobDefinition", b =>
                {
                    b.Navigation("JobParameterDefinitions");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Brobot.Api.Entities.JobParameterDefinition", b =>
                {
                    b.Navigation("JobParameters");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaEvent", b =>
                {
                    b.Navigation("SecretSantaPairings");
                });

            modelBuilder.Entity("Brobot.Api.Entities.SecretSantaGroup", b =>
                {
                    b.Navigation("SecretSantaEvents");

                    b.Navigation("SecretSantaGroupDiscordUsers");
                });

            modelBuilder.Entity("Brobot.Api.Entities.Server", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("VoiceChannels");
                });

            modelBuilder.Entity("Brobot.Api.Entities.VoiceChannel", b =>
                {
                    b.Navigation("HotOpSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
